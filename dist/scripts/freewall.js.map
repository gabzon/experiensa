{"version":3,"sources":["../bower_components/freewall/freewall.js"],"names":["$","isNumeric","src","constructor","Number","isFunction","Function","$W","window","$D","document","layoutManager","defaultConfig","animate","cellW","cellH","delay","engine","fixSize","gutterX","gutterY","keepOrder","selector","draggable","cacheSize","rightToLeft","bottomToTop","onGapFound","onComplete","onResize","onBlockDrag","onBlockMove","onBlockDrop","onBlockReady","onBlockFinish","onBlockActive","onBlockResize","plugin","totalGrid","transition","loadBlock","item","setting","runtime","block","$item","active","data","fixPos","attr","parseInt","blockId","lastId","hasClass","id","data-delay","index","this","setTransition","isNaN","makeRound","height","width","style","col","Math","row","round","limitCol","limitRow","minHoB","minWoB","maxHoB","maxWoB","resize","split","y","x","min","holeId","holes","top","left","setBlock","call","realBlock","toFixed","blocks","showBlock","action","start","self","trans","opacity","method","nestedGrid","length","clearTimeout","position","setTimeout","innerWall","nested","freewall","reset","adjustBlock","adjustUnit","max","floor","cellS","resetGrid","matrix","totalCol","totalRow","setDraggable","option","isTouch","config","startX","startY","handle","onDrop","onDrag","onStart","each","mouseDown","evt","stopPropagation","originalEvent","touches","changedTouches","button","which","ele","clientX","clientY","$E","css","bind","mouseUp","mouseMove","unbind","extend","$H","posStyle","find","on","stop","webkitTransition","MozTransition","msTransition","OTransition","getFreeArea","t","l","maxY","maxX","minX","minY","setWallSize","container","totalWidth","totalHeight","data-total-col","data-total-row","data-wall-width","ceil","data-wall-height","giot","items","fillMatrix","w","h","wall","bigLoop","freeArea","misBlock","fitWidth","lastBlock","smallLoop","i","hasOwnProperty","b","s","shift","splice","lastX","lastY","event","addClass","tracker","klass","setHoles","refresh","removeClass","zIndex","key","oldDropId","removeAttr","data-width","data-height","data-position","MAX","MAX_VALUE","events","filter","running","currentMethod","currentArguments","bodyStyle","body","addCustomEvent","name","func","toLowerCase","eid","push","appendBlock","allBlock","appendTo","activeBlock","getAttribute","appendHoles","newHoles","concat","destroy","fillHoles","arguments","fireEvent","object","fitHeight","callee","fitZone","prepend","params","apply","Array","prototype","slice","unFilter","addConfig","newConfig","createEngine","engineData","createPlugin","pluginData","getMethod","Zepto","jQuery"],"mappings":"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","file":"freewall.js","sourcesContent":["// created by Minh Nguyen;\n// version 1.05;\n\n(function($) {\n    \n    // for zeptojs;\n    $.isNumeric == null && ($.isNumeric = function(src) {\n        return src != null && src.constructor === Number;\n    });\n\n    $.isFunction == null && ($.isFunction = function(src) {\n        return src != null && src instanceof Function;\n    });\n\n    var $W = $(window);\n    var $D = $(document);\n    \n    var layoutManager = {\n        // default setting;\n        defaultConfig: {\n            animate: false,\n            cellW: 100, // function(container) {return 100;}\n            cellH: 100, // function(container) {return 100;}\n            delay: 0, // slowdown active block;\n            engine: 'giot', // 'giot' is a person name;\n            fixSize: null, // resize + adjust = fill gap;\n            //fixSize: 0, resize but keep ratio = no fill gap;\n            //fixSize: 1, no resize + no adjust = no fill gap;\n            gutterX: 15, // width spacing between blocks;\n            gutterY: 15, // height spacing between blocks;\n            keepOrder: false,\n            selector: '> div',\n            draggable: false,\n            cacheSize: true, // caches the original size of block;\n            rightToLeft: false,\n            bottomToTop: false,\n            onGapFound: function() {},\n            onComplete: function() {},\n            onResize: function() {},\n            onBlockDrag: function() {},\n            onBlockMove: function() {},\n            onBlockDrop: function() {},\n            onBlockReady: function() {},\n            onBlockFinish: function() {},\n            onBlockActive: function() {},\n            onBlockResize: function() {}\n        },\n        plugin: {},\n        totalGrid: 1,\n        transition: false,\n        loadBlock: function(item, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var block = null;\n            var $item = $(item);\n            var active = $item.data(\"active\");\n            var fixPos = $item.attr('data-position');\n            var fixSize = parseInt($item.attr('data-fixSize'));\n            var blockId = runtime.lastId++ + '-' + runtime.totalGrid;\n            \n            //ignore dragging block;\n            if ($item.hasClass('fw-float')) return;\n            $item.attr({id: blockId, 'data-delay': item.index});\n\n            //remove animation for speed render;\n            if (setting.animate && this.transition) {\n                this.setTransition(item, \"\");\n            }\n\n            isNaN(fixSize) && (fixSize = null);\n            (fixSize == null) && (fixSize = setting.fixSize);\n            var makeRound = (fixSize >= 1) ? \"ceil\" : \"round\";\n            // store original size;\n           \n            $item.attr('data-height') == null && $item.attr('data-height', $item.height());\n            $item.attr('data-width') == null && $item.attr('data-width', $item.width());\n            var height = 1 * $item.attr('data-height');\n            var width = 1 * $item.attr('data-width');\n            \n            if (!setting.cacheSize) {\n                item.style.width = \"\";\n                width = $item.width();\n\n                item.style.height = \"\";\n                height = $item.height();\n            }\n\n            var col = !width ? 0 : Math[makeRound]((width + gutterX) / cellW);\n            var row = !height ? 0 : Math[makeRound]((height + gutterY) / cellH);\n\n            // estimate size;\n            if (!fixSize && setting.cellH == 'auto') {\n                $item.width(cellW * col - gutterX);\n                item.style.height = \"\";\n                height = $item.height();\n                row = !height ? 0 : Math.round((height + gutterY) / cellH);\n            }\n\n            if (!fixSize && setting.cellW == 'auto') {\n                $item.height(cellH * row - gutterY);\n                item.style.width = \"\";\n                width = $item.width();\n                col = !width ? 0 : Math.round((width + gutterX) / cellW);\n            }\n            \n            // for none resize block;\n            if ((fixSize != null) && (col > runtime.limitCol || row > runtime.limitRow)) {\n                block = null;\n            } else {\n                // get smallest width and smallest height of block;\n                // using for image runtime;\n                row && row < runtime.minHoB && (runtime.minHoB = row);\n                col && col < runtime.minWoB && (runtime.minWoB = col);\n\n                // get biggest width and biggest height of block;\n                row > runtime.maxHoB && (runtime.maxHoB = row);\n                col > runtime.maxWoB && (runtime.maxWoB = col);\n\n                width == 0 && (col = 0);\n                height == 0 && (row = 0);\n\n                block = {\n                    resize: false,\n                    id: blockId,\n                    width: col,\n                    height: row,\n                    fixSize: fixSize\n                };\n\n                // for fix position;\n                if (fixPos) {\n                    fixPos = fixPos.split(\"-\");\n                    block.y = 1 * fixPos[0];\n                    block.x = 1 * fixPos[1];\n                    block.width = fixSize != null ? col : Math.min(col, runtime.limitCol - block.x);\n                    block.height = fixSize != null ? row : Math.min(row, runtime.limitRow - block.y);\n                    var holeId = block.y + \"-\" + block.x + \"-\" + block.width + \"-\" + block.height;\n                    if (active) {\n                        runtime.holes[holeId] = {\n                            id: block.id,\n                            top: block.y,\n                            left: block.x,\n                            width: block.width,\n                            height: block.height\n                        };\n                        this.setBlock(block, setting);\n                    } else {\n                        delete runtime.holes[holeId];\n                    }\n                    \n                }\n            }\n\n            // for css animation;\n            if ($item.attr(\"data-state\") == null) {\n                $item.attr(\"data-state\", \"init\");\n            } else {\n                $item.attr(\"data-state\", \"move\");\n            }\n\n            setting.onBlockReady.call(item, block, setting);\n\n            return (fixPos && active) ? null : block;\n        },\n        setBlock: function(block, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var height = block.height;\n            var width = block.width;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var x = block.x;\n            var y = block.y;\n\n            if (setting.rightToLeft) {\n                x = runtime.limitCol - x - width;\n            }\n            if (setting.bottomToTop) {\n                y = runtime.limitRow - y - height;\n            }\n\n            var realBlock = {\n                fixSize: block.fixSize,\n                resize: block.resize,\n                top: y * cellH,\n                left: x  * cellW,\n                width: cellW * width - gutterX,\n                height: cellH * height - gutterY\n            };\n            \n            realBlock.top = 1 * realBlock.top.toFixed(2);\n            realBlock.left = 1 * realBlock.left.toFixed(2);\n            realBlock.width = 1 * realBlock.width.toFixed(2);\n            realBlock.height = 1 * realBlock.height.toFixed(2);\n\n            //runtime.length += 1;\n            block.id && (runtime.blocks[block.id] = realBlock);\n\n            // for append feature;\n            return realBlock;\n        },\n        showBlock: function(item, setting) {\n            var runtime = setting.runtime;\n            var method = setting.animate && !this.transition ? 'animate' : 'css';\n            var block = runtime.blocks[item.id];\n            var $item = $(item);\n            var self = this;\n            var start = $item.attr(\"data-state\") != \"move\";\n            var trans = start ? \"width 0.5s, height 0.5s\" : \"top 0.5s, left 0.5s, width 0.5s, height 0.5s, opacity 0.5s\";\n            \n            item.delay && clearTimeout(item.delay);\n            //ignore dragging block;\n            if ($item.hasClass('fw-float')) return;\n            \n            // kill the old transition;\n            self.setTransition(item, \"\");\n            item.style.position = \"absolute\";\n            setting.onBlockActive.call(item, block, setting);\n            \n            function action() {\n                // start to arrange;\n                start && $item.attr(\"data-state\", \"start\");\n                // add animation by using css3 transition;\n                if (setting.animate && self.transition) {\n                    self.setTransition(item, trans);\n                }\n\n                // for hidden block;\n                if (!block) {\n                    //var position = $item.position(); <= make speed so slow;\n                    var height = parseInt(item.style.height) || 0;\n                    var width = parseInt(item.style.width) || 0;\n                    var left = parseInt(item.style.left) || 0;\n                    var top = parseInt(item.style.top) || 0;\n                    $item[method]({\n                        left: left + width / 2,\n                        top: top + height / 2,\n                        width: 0,\n                        height: 0,\n                        opacity: 0\n                    });\n                } else {\n                    if (block.fixSize) {\n                        block.height = 1 * $item.attr(\"data-height\");\n                        block.width = 1 * $item.attr(\"data-width\");\n                    }\n\n                    $item[\"css\"]({\n                        opacity: 1,\n                        width: block.width,\n                        height: block.height\n                    });\n\n                    // for animating by javascript;\n                    $item[method]({\n                        top: block.top,\n                        left: block.left\n                    });\n\n                    if ($item.attr('data-nested') != null) {\n                        self.nestedGrid(item, setting);\n                    }\n                }\n\n                runtime.length -= 1;\n\n                setting.onBlockFinish.call(item, block, setting);\n\n                runtime.length == 0 && setting.onComplete.call(item, block, setting);\n            }\n\n            block && block.resize && setting.onBlockResize.call(item, block, setting);\n            \n            setting.delay > 0 ? (item.delay = setTimeout(action, setting.delay * $item.attr(\"data-delay\"))) : action(); \n        },\n        nestedGrid: function(item, setting) {\n            var innerWall, $item = $(item), runtime = setting.runtime;\n            var gutterX = $item.attr(\"data-gutterX\") || setting.gutterX;\n            var gutterY = $item.attr(\"data-gutterY\") || setting.gutterY;\n            var method = $item.attr(\"data-method\") || \"fitZone\";\n            var nested = $item.attr('data-nested') || \"> div\";\n            var cellH = $item.attr(\"data-cellH\") || setting.cellH;\n            var cellW = $item.attr(\"data-cellW\") || setting.cellW;\n            var block = runtime.blocks[item.id];\n            \n            if (block) {\n                innerWall = new freewall($item);\n                innerWall.reset({\n                    cellH: cellH,\n                    cellW: cellW,\n                    gutterX: 1 * gutterX,\n                    gutterY: 1 * gutterY,\n                    selector: nested,\n                    cacheSize: false\n                });\n\n                switch (method) {\n                    case \"fitHeight\":\n                        innerWall[method](block.height);\n                        break;\n                    case \"fitWidth\":\n                        innerWall[method](block.width);\n                        break;\n                    case \"fitZone\":\n                        innerWall[method](block.width, block.height);\n                        break;\n                }\n            }\n        },\n        adjustBlock: function(block, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var $item = $(\"#\" + block.id);\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n\n            if (setting.cellH == 'auto') {\n                $item.width(block.width * cellW - gutterX);\n                $item[0].style.height = \"\";\n                block.height = Math.round(($item.height() + gutterY) / cellH);\n            }\n        },\n        adjustUnit: function(width, height, setting) {\n            var gutterX = setting.gutterX;\n            var gutterY = setting.gutterY;\n            var runtime = setting.runtime;\n            var cellW = setting.cellW;\n            var cellH = setting.cellH;\n\n            $.isFunction(cellW) && (cellW = cellW(width));\n            cellW = 1 * cellW;\n            !$.isNumeric(cellW) && (cellW = 1);\n            \n            $.isFunction(cellH) && (cellH = cellH(height));\n            cellH = 1 * cellH;\n            !$.isNumeric(cellH) && (cellH = 1);\n\n            if ($.isNumeric(width)) {\n                // adjust cell width via container;\n                cellW < 1 && (cellW = cellW * width);\n\n                // estimate total columns;\n                var limitCol = Math.max(1, Math.floor(width / cellW));\n\n                // adjust unit size for fit width;\n                if (!$.isNumeric(gutterX)) {\n                    gutterX = (width - limitCol * cellW) / Math.max(1, (limitCol - 1));\n                    gutterX = Math.max(0, gutterX);\n                }\n\n                limitCol = Math.floor((width + gutterX) / cellW);\n                runtime.cellW = (width + gutterX) / Math.max(limitCol, 1);\n                runtime.cellS = runtime.cellW / cellW;\n                runtime.gutterX = gutterX;\n                runtime.limitCol = limitCol;\n            } \n\n            if ($.isNumeric(height)) {\n                // adjust cell height via container;\n                cellH < 1 && (cellH = cellH * height);\n\n                // estimate total rows;\n                var limitRow = Math.max(1, Math.floor(height / cellH));\n\n                // adjust size unit for fit height;\n                if (!$.isNumeric(gutterY)) {\n                    gutterY = (height - limitRow * cellH) / Math.max(1, (limitRow - 1));\n                    gutterY = Math.max(0, gutterY);\n                }\n\n                limitRow = Math.floor((height + gutterY) / cellH);\n                runtime.cellH = (height + gutterY) / Math.max(limitRow, 1);\n                runtime.cellS = runtime.cellH / cellH;\n                runtime.gutterY = gutterY;\n                runtime.limitRow = limitRow;\n            } \n\n            if (!$.isNumeric(width)) {\n                // adjust cell width via cell height;\n                cellW < 1 && (cellW = runtime.cellH);\n                runtime.cellW = cellW != 1 ? cellW * runtime.cellS : 1;\n                runtime.gutterX = gutterX;\n                runtime.limitCol = 666666;\n            }\n\n            if (!$.isNumeric(height)) {\n                // adjust cell height via cell width;\n                cellH < 1 && (cellH = runtime.cellW);\n                runtime.cellH = cellH != 1 ? cellH * runtime.cellS : 1;\n                runtime.gutterY = gutterY;\n                runtime.limitRow = 666666;\n            }\n        },\n        resetGrid: function(runtime) {\n            runtime.blocks = {};\n            runtime.length = 0;\n            runtime.cellH = 0;\n            runtime.cellW = 0;\n            runtime.lastId = 1;\n            runtime.matrix = {};\n            runtime.totalCol = 0;\n            runtime.totalRow = 0;\n        },\n        setDraggable: function(item, option) {\n            var isTouch = false;\n            var config = {\n                startX: 0, //start clientX;\n                startY: 0, \n                top: 0,\n                left: 0,\n                handle: null,\n                onDrop: function() {},\n                onDrag: function() {},\n                onStart: function() {}\n            };\n\n            $(item).each(function() {\n                var setting = $.extend({}, config, option);\n                var handle = setting.handle || this;\n                var ele = this;\n                var $E = $(ele);\n                var $H = $(handle);\n\n                var posStyle = $E.css(\"position\");\n                posStyle != \"absolute\" && $E.css(\"position\", \"relative\");\n                \n\n                function mouseDown(evt) {\n                    evt.stopPropagation();\n                    evt = evt.originalEvent;\n\n                    if (evt.touches) {\n                        isTouch = true;\n                        evt = evt.changedTouches[0];\n                    }\n\n                    if (evt.button != 2 && evt.which != 3) {\n                        setting.onStart.call(ele, evt);\n                        \n                        setting.startX = evt.clientX;\n                        setting.startY = evt.clientY;\n                        setting.top = parseInt($E.css(\"top\")) || 0;\n                        setting.left = parseInt($E.css(\"left\")) || 0;\n                        \n                        $D.bind(\"mouseup touchend\", mouseUp);\n                        $D.bind(\"mousemove touchmove\", mouseMove); \n                    }\n\n                    return false;\n                };\n                \n                        \n                function mouseMove(evt) {\n                    evt = evt.originalEvent;\n                    isTouch && (evt = evt.changedTouches[0]);\n                    \n                    $E.css({\n                        top: setting.top - (setting.startY - evt.clientY),\n                        left: setting.left - (setting.startX - evt.clientX)\n                    });\n                    \n                    setting.onDrag.call(ele, evt);\n                };\n                \n                function mouseUp(evt) {\n                    evt = evt.originalEvent;\n                    isTouch && (evt = evt.changedTouches[0]);\n        \n                    setting.onDrop.call(ele, evt);\n\n                    $D.unbind(\"mouseup touchend\", mouseUp);\n                    $D.unbind(\"mousemove touchmove\", mouseMove);\n                };\n\n                // ignore drag drop on text field;\n                $E.find(\"iframe, form, input, textarea, .ignore-drag\")\n                .each(function() {\n                    $(this).on(\"touchstart mousedown\", function(evt) {\n                        evt.stopPropagation();\n                    });\n                });\n                \n                $D.unbind(\"mouseup touchend\", mouseUp);\n                $D.unbind(\"mousemove touchmove\", mouseMove);\n                $H.unbind(\"mousedown touchstart\").bind(\"mousedown touchstart\", mouseDown);\n\n            });\n        },\n        setTransition: function(item, trans) {\n            var style = item.style;\n            var $item = $(item);\n                \n            // remove animation;\n            if (!this.transition && $item.stop) {\n                $item.stop();\n            } else if (style.webkitTransition != null) {\n                style.webkitTransition = trans;\n            } else if (style.MozTransition != null) {\n                style.MozTransition = trans;\n            } else if (style.msTransition != null) {\n                style.msTransition = trans;\n            } else if (style.OTransition != null) {\n                style.OTransition = trans;\n            } else {\n                style.transition = trans;\n            }\n        },\n        getFreeArea: function(t, l, runtime) {\n            var maxY = Math.min(t + runtime.maxHoB, runtime.limitRow);\n            var maxX = Math.min(l + runtime.maxWoB, runtime.limitCol);\n            var minX = maxX;\n            var minY = maxY;\n            var matrix = runtime.matrix;\n            \n            // find limit zone by horizon;\n            for (var y = t; y < minY; ++y) {\n                for (var x = l; x < maxX; ++x) {\n                    if (matrix[y + '-' + x]) {\n                        (l < x && x < minX) && (minX = x);\n                    }\n                }\n            }\n            \n            // find limit zone by vertical;\n            for (var y = t; y < maxY; ++y) {\n                for (var x = l; x < minX; ++x) {\n                    if (matrix[y + '-' + x]) {\n                        (t < y && y < minY) && (minY = y);\n                    }\n                }\n            }\n\n            return {\n                top: t,\n                left: l,\n                width: minX - l,\n                height: minY - t\n            };\n\n        },\n        setWallSize: function(runtime, container) {\n            var totalRow = runtime.totalRow;\n            var totalCol = runtime.totalCol;\n            var gutterY = runtime.gutterY;\n            var gutterX = runtime.gutterX;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var totalWidth = Math.max(0, cellW * totalCol - gutterX);\n            var totalHeight = Math.max(0, cellH * totalRow - gutterY);\n            \n            container.attr({\n                'data-total-col': totalCol,\n                'data-total-row': totalRow,\n                'data-wall-width': Math.ceil(totalWidth),\n                'data-wall-height': Math.ceil(totalHeight)\n            });\n\n            if (runtime.limitCol < runtime.limitRow) {\n                // do not set height with nesting grid;\n                !container.attr(\"data-height\") && container.height(Math.ceil(totalHeight));\n            }\n        }\n    };\n\n    \n\n    var engine = {\n        // Giot just a person name;\n        giot: function(items, setting) {\n            var runtime = setting.runtime,\n                row = runtime.limitRow,\n                col = runtime.limitCol,\n                x = 0,\n                y = 0,\n                maxX = runtime.totalCol,\n                maxY = runtime.totalRow,\n                wall = {},\n                holes = runtime.holes,\n                block = null,\n                matrix = runtime.matrix,\n                bigLoop = Math.max(col, row),\n                freeArea = null,\n                misBlock = null,\n                fitWidth = col < row ? 1 : 0,\n                lastBlock = null,\n                smallLoop = Math.min(col, row);\n\n            // fill area with top, left, width, height;\n            function fillMatrix(id, t, l, w, h) {\n                for (var y = t; y < t + h;) {\n                    for (var x = l; x < l + w;) {\n                        matrix[y + '-' + x] = id;\n                        ++x > maxX && (maxX = x);\n                    }\n                    ++y > maxY && (maxY = y);\n                }\n            }\n            \n            // set holes on the wall;\n            for (var i in holes) {\n                if (holes.hasOwnProperty(i)) {\n                    fillMatrix(holes[i][\"id\"] || true, holes[i]['top'], holes[i]['left'], holes[i]['width'], holes[i]['height']);\n                }\n            }\n            \n\n            for (var b = 0; b < bigLoop; ++b) {\n                if (!items.length) break;\n                fitWidth ? (y = b) : (x = b);\n                lastBlock = null;\n\n                for (var s = 0; s < smallLoop; ++s) {\n                    if (!items.length) break;\n                    block = null;\n                    fitWidth ? (x = s) : (y = s);\n                    if (runtime.matrix[y + '-' + x]) continue;\n                    freeArea = layoutManager.getFreeArea(y, x, runtime);\n\n                    // trying resize last block to fit free area;\n                    if (setting.fixSize == null) {\n                        // resize near block to fill gap;\n                        if (lastBlock && !fitWidth && runtime.minHoB > freeArea.height) {\n                            lastBlock.height += freeArea.height;\n                            lastBlock.resize = true;\n                            fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                            layoutManager.setBlock(lastBlock, setting);\n                            continue;\n                        } else if (lastBlock && fitWidth && runtime.minWoB > freeArea.width) {\n                            lastBlock.width += freeArea.width;\n                            lastBlock.resize = true;\n                            fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                            layoutManager.setBlock(lastBlock, setting);\n                            continue;\n                        }\n                    }\n                    \n                    // get the next block to keep order;\n                    if (setting.keepOrder) {\n                        block = items.shift();\n                        block.resize = true;\n                    } else {\n                        // find a suitable block to fit gap;\n                        for (var i = 0; i < items.length; ++i) {\n                            if (items[i].height > freeArea.height) continue;\n                            if (items[i].width > freeArea.width) continue;\n                            block = items.splice(i, 1)[0];\n                            break;\n                        }\n\n                        // trying resize the other block to fit gap;\n                        if (block == null && setting.fixSize == null) {\n                            // get other block fill to gap;\n                            for (var i = 0; i < items.length; ++i) {\n                                if (items[i]['fixSize'] != null) continue;\n                                block = items.splice(i, 1)[0];\n                                block.resize = true;\n                                break;\n                            }\n                            \n                        }\n                    }\n\n                    \n                    if (block != null) {\n                        // resize block with free area;\n                        if (block.resize) {\n                            if (fitWidth) {\n                                block.width = freeArea.width;\n                                if (setting.cellH == 'auto') {\n                                    layoutManager.adjustBlock(block, setting);\n                                }\n                                // for fitZone;\n                                block.height = Math.min(block.height, freeArea.height);\n                            } else {\n                                block.height = freeArea.height;\n                                // for fitZone;\n                                block.width = Math.min(block.width, freeArea.width);\n                            }\n                        }\n\n                        wall[block.id] = {\n                            id: block.id,\n                            x: x,\n                            y: y,\n                            width: block.width,\n                            height: block.height,\n                            resize: block.resize,\n                            fixSize: block.fixSize\n                        };\n                        \n                        // keep success block for next round;\n                        lastBlock = wall[block.id];\n\n                        fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                        layoutManager.setBlock(lastBlock, setting);\n                    } else {\n                        // get expect area;\n                        var misBlock = {\n                            x: x,\n                            y: y,\n                            fixSize: 0\n                        };\n                        if (fitWidth) {\n                            misBlock.width = freeArea.width;\n                            misBlock.height = 0;\n                            var lastX = x - 1;\n                            var lastY = y;\n                            \n                            while (matrix[lastY + '-' + lastX]) {\n                                matrix[lastY + '-' + x] = true;\n                                misBlock.height += 1;\n                                lastY += 1;\n                            }\n                        } else {\n                            misBlock.height = freeArea.height;\n                            misBlock.width = 0;\n                            var lastY = y - 1;\n                            var lastX = x;\n                            \n                            while (matrix[lastY + '-' + lastX]) {\n                                matrix[y + '-' + lastX] = true;\n                                misBlock.width += 1;\n                                lastX += 1;\n                            }\n                        }\n                        setting.onGapFound(layoutManager.setBlock(misBlock, setting), setting);\n                    }\n                }\n\n            }\n\n            runtime.matrix = matrix;\n            runtime.totalRow = maxY;\n            runtime.totalCol = maxX;\n        }\n    };\n\n\n\n    window.freewall = function(selector) {\n        \n        var container = $(selector);\n        if (container.css('position') == 'static') {\n            container.css('position', 'relative');\n        }\n        var MAX = Number.MAX_VALUE;\n        var klass = this;\n        // increase the instance index;\n        layoutManager.totalGrid += 1;\n\n        var setting = $.extend({}, layoutManager.defaultConfig);\n        var runtime = {\n            blocks: {}, // store all items;\n            events: {}, // store custome events;\n            matrix: {},\n            holes: {}, // forbidden zone;\n            \n            cellW: 0,\n            cellH: 0, // unit adjust;\n            cellS: 1, // unit scale;\n            \n            filter: '', // filter selector;\n            \n            lastId: 0,\n            length: 0,\n\n            maxWoB: 0, // max width of block;\n            maxHoB: 0,\n            minWoB: MAX, \n            minHoB: MAX, // min height of block;\n\n            running: 0, // flag to check layout arranging;\n\n            gutterX: 15, \n            gutterY: 15,\n\n            totalCol: 0,\n            totalRow: 0,\n\n            limitCol: 666666, // maximum column; \n            limitRow: 666666,\n            \n            currentMethod: null,\n            currentArguments: []\n        };\n        setting.runtime = runtime;\n        runtime.totalGrid = layoutManager.totalGrid;\n        \n        // check browser support transition;\n        var bodyStyle = document.body.style;\n        if (!layoutManager.transition) {\n            (bodyStyle.webkitTransition != null ||\n            bodyStyle.MozTransition != null ||\n            bodyStyle.msTransition != null ||\n            bodyStyle.OTransition != null ||\n            bodyStyle.transition != null) &&\n            (layoutManager.transition = true);\n        }\n        \n\n        function setDraggable(item) {\n            \n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var $item = $(item);\n            var handle = $item.find($item.attr(\"data-handle\"));\n            layoutManager.setDraggable(item, {\n                handle: handle[0],\n                onStart: function(event) {\n                    if (setting.animate && layoutManager.transition) {\n                        layoutManager.setTransition(this, \"\");\n                    }\n                    $item.css('z-index', 9999).addClass('fw-float');\n                    \n                    setting.onBlockDrag.call(item, event);\n                },\n                onDrag: function(event, tracker) {\n                    var position = $item.position();\n                    var top = Math.round(position.top / cellH);\n                    var left = Math.round(position.left / cellW);\n                    var width = Math.round($item.width() / cellW);\n                    var height = Math.round($item.height() / cellH);\n                    top = Math.min(Math.max(0, top), runtime.limitRow - height);\n                    left = Math.min(Math.max(0, left), runtime.limitCol - width);\n                    klass.setHoles({top: top, left: left, width: width, height: height});\n                    klass.refresh();\n\n                    setting.onBlockMove.call(item, event);\n                },\n                onDrop: function(event) {\n                    var position = $item.position();\n                    var top = Math.round(position.top / cellH);\n                    var left = Math.round(position.left / cellW);\n                    var width = Math.round($item.width() / cellW);\n                    var height = Math.round($item.height() / cellH);\n                    top = Math.min(Math.max(0, top), runtime.limitRow - height);\n                    left = Math.min(Math.max(0, left), runtime.limitCol - width);\n\n                    $item.removeClass('fw-float');\n                    $item.css({\n                        zIndex: \"auto\",\n                        top: top * cellH,\n                        left: left * cellW\n                    });\n                    \n                    //check old drag element;\n                    var x, y, key, oldDropId;\n                    for (y = 0; y < height; ++y) {\n                        for (x = 0; x < width; ++x) {\n                            key = (y + top) + \"-\" + (x + left);\n                            oldDropId = runtime.matrix[key];\n                            if (oldDropId && oldDropId != true) {\n                                $(\"#\" + oldDropId).removeAttr(\"data-position\");\n                            }\n                        }\n                    }\n                    \n                    runtime.holes = {};\n                    \n                    $item.attr({\n                        \"data-width\": $item.width(),\n                        \"data-height\": $item.height(),\n                        \"data-position\": top + \"-\" + left\n                    });\n\n                    klass.refresh();\n\n                    setting.onBlockDrop.call(item, event);\n                }\n            });\n        }\n        \n\n        $.extend(klass, {\n            \n            addCustomEvent: function(name, func) {\n                var events = runtime.events;\n                name = name.toLowerCase();\n                !events[name] && (events[name] = []);\n                func.eid = events[name].length;\n                events[name].push(func);\n                return this;\n            },\n\n            appendBlock: function(items) {\n                var allBlock = $(items).appendTo(container);\n                var block = null;\n                var activeBlock = [];\n                \n                if (runtime.currentMethod) {\n                    allBlock.each(function(index, item) {\n                        item.index = ++index;\n                        block = layoutManager.loadBlock(item, setting);\n                        block && activeBlock.push(block);\n                    });\n                \n                    engine[setting.engine](activeBlock, setting);\n                    \n                    layoutManager.setWallSize(runtime, container);\n                    \n                    runtime.length = allBlock.length;\n\n                    allBlock.each(function(index, item) {\n                        layoutManager.showBlock(item, setting);\n                        if (setting.draggable || item.getAttribute('data-draggable')) {\n                            setDraggable(item);\n                        }\n                    });\n                }\n            },\n            /*\n            add one or more blank area (hole) on layout;\n            example:\n                \n                wall.appendHoles({\n                    top: 10,\n                    left: 36,\n                    width: 2,\n                    height: 6\n                });\n\n                wall.appendHoles([\n                    {\n                        top: 16,\n                        left: 16,\n                        width: 8,\n                        height: 2\n                    },\n                    {\n                        top: 10,\n                        left: 36,\n                        width: 2,\n                        height: 6\n                    }\n                ]);\n\n            */\n            appendHoles: function(holes) {\n                var newHoles = [].concat(holes), h = {}, i;\n                for (i = 0; i < newHoles.length; ++i) {\n                    h = newHoles[i];\n                    runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height] = h;\n                }\n                return this;\n            },\n\n            container: container,\n\n            destroy: function() {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                allBlock.each(function(index, item) {\n                    $item = $(item);\n                    var width = 1 * $item.attr('data-width') || \"\";\n                    var height = 1 * $item.attr('data-height') || \"\";\n                    $item.width(width).height(height).css({\n                        position: 'static'\n                    });\n                });\n            },\n\n            fillHoles: function(holes) {\n                if (arguments.length == 0) {\n                    runtime.holes = {};\n                } else {\n                    var newHoles = [].concat(holes), h = {}, i;\n                    for (i = 0; i < newHoles.length; ++i) {\n                        h = newHoles[i];\n                        delete runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height];\n                    }\n                }\n                return this;\n            },\n\n            filter: function(filter) {\n                runtime.filter = filter;\n                runtime.currentMethod && this.refresh();\n                return this;\n            },\n\n            fireEvent: function(name, object, setting) {\n                var events = runtime.events;\n                name = name.toLowerCase();\n                if (events[name] && events[name].length) {\n                    for (var i = 0; i < events[name].length; ++i) {\n                        events[name][i].call(this, object, setting);\n                    }\n                }\n                return this;\n            },\n\n            fitHeight: function(height) {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                height = height ? height : container.height() || $W.height();\n                \n                runtime.currentMethod = arguments.callee;\n                runtime.currentArguments = arguments;\n                \n                layoutManager.resetGrid(runtime);\n                layoutManager.adjustUnit('auto', height, setting);\n                \n                if (runtime.filter) {\n                    allBlock.data('active', 0);\n                    allBlock.filter(runtime.filter).data('active', 1);\n                } else {\n                    allBlock.data('active', 1);\n                }\n\n                allBlock.each(function(index, item) {\n                    var $item = $(item);\n                    item.index = ++index;\n                    block = layoutManager.loadBlock(item, setting);\n                    block && $item.data(\"active\") && activeBlock.push(block);\n                });\n                \n                klass.fireEvent('onGridReady', container, setting);\n\n                engine[setting.engine](activeBlock, setting);\n                \n                layoutManager.setWallSize(runtime, container);\n\n                klass.fireEvent('onGridArrange', container, setting);\n\n                runtime.length = allBlock.length;\n\n                allBlock.each(function(index, item) {\n                    layoutManager.showBlock(item, setting);\n                    if (setting.draggable || item.getAttribute('data-draggable')) {\n                        setDraggable(item);\n                    }\n                });\n            },\n\n            fitWidth: function(width) {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                width = width ? width : container.width() || $W.width();\n\n                runtime.currentMethod = arguments.callee;\n                runtime.currentArguments = arguments;\n                \n                layoutManager.resetGrid(runtime);\n                layoutManager.adjustUnit(width, 'auto', setting);\n                \n                if (runtime.filter) {\n                    allBlock.data('active', 0);\n                    allBlock.filter(runtime.filter).data('active', 1);\n                } else {\n                    allBlock.data('active', 1);\n                }\n                \n                allBlock.each(function(index, item) {\n                    var $item = $(item);\n                    item.index = ++index;\n                    block = layoutManager.loadBlock(item, setting);\n                    block && $item.data(\"active\") && activeBlock.push(block);\n                });\n                \n                klass.fireEvent('onGridReady', container, setting);\n                \n                engine[setting.engine](activeBlock, setting);\n\n                layoutManager.setWallSize(runtime, container);\n                \n                klass.fireEvent('onGridArrange', container, setting);\n\n                runtime.length = allBlock.length;\n\n                allBlock.each(function(index, item) {\n                    layoutManager.showBlock(item, setting);\n                    if (setting.draggable || item.getAttribute('data-draggable')) {\n                        setDraggable(item);\n                    }\n                });\n            },\n\n            fitZone: function(width, height) {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                height = height ? height : container.height() || $W.height();\n                width = width ? width : container.width() || $W.width();\n                \n                runtime.currentMethod = arguments.callee;\n                runtime.currentArguments = arguments;\n                \n                layoutManager.resetGrid(runtime);\n                layoutManager.adjustUnit(width, height, setting);\n\n                if (runtime.filter) {\n                    allBlock.data('active', 0);\n                    allBlock.filter(runtime.filter).data('active', 1);\n                } else {\n                    allBlock.data('active', 1);\n                }\n                \n                allBlock.each(function(index, item) {\n                    var $item = $(item);\n                    item.index = ++index;\n                    block = layoutManager.loadBlock(item, setting);\n                    block && $item.data(\"active\") && activeBlock.push(block);\n                });\n\n                klass.fireEvent('onGridReady', container, setting);\n\n                engine[setting.engine](activeBlock, setting);\n                \n                layoutManager.setWallSize(runtime, container);\n                \n                klass.fireEvent('onGridArrange', container, setting);\n\n                runtime.length = allBlock.length;\n               \n                allBlock.each(function(index, item) {\n                    layoutManager.showBlock(item, setting);\n                    if (setting.draggable || item.getAttribute('data-draggable')) {\n                        setDraggable(item);\n                    }\n                });\n            },\n\n            /*\n            set block with special position, the top and left are multiple of unit width/height;\n            example:\n\n                wall.fixPos({\n                    top: 0,\n                    left: 0,\n                    block: $('.free')\n                });\n            */\n            fixPos: function(option) {\n                $(option.block).attr({'data-position': option.top + \"-\" + option.left});\n                return this;\n            },\n\n            /*\n            set block with special size, the width and height are multiple of unit width/height;\n            example:\n\n                wall.fixSize({\n                    height: 5,\n                    width: 2,\n                    block: $('.free')\n                });\n            */\n            fixSize: function(option) {\n                option.height != null && $(option.block).attr({'data-height': option.height});\n                option.width != null && $(option.block).attr({'data-width': option.width});\n                return this;\n            },\n\n            prepend: function(items) {\n                container.prepend(items);\n                runtime.currentMethod && this.refresh();\n                return this;\n            },\n\n            refresh: function() {\n                var params = arguments.length ? arguments : runtime.currentArguments;\n                runtime.currentMethod == null && (runtime.currentMethod = this.fitWidth);\n                runtime.currentMethod.apply(this, Array.prototype.slice.call(params, 0));\n                return this;\n            },\n\n            /*\n            custom layout setting;\n            example:\n\n                wall.reset({\n                    selector: '.brick',\n                    animate: true,\n                    cellW: 160,\n                    cellH: 160,\n                    delay: 50,\n                    onResize: function() {\n                        wall.fitWidth();\n                    }\n                });\n            */\n            reset: function(option) {\n                $.extend(setting, option);\n                return this;\n            },\n            \n            /*\n            create one or more blank area (hole) on layout;\n            example:\n                \n                wall.setHoles({\n                    top: 2,\n                    left: 2,\n                    width: 2,\n                    height: 2\n                });\n            */\n            \n            setHoles: function(holes) {\n                var newHoles = [].concat(holes), h = {}, i;\n                runtime.holes = {};\n                for (i = 0; i < newHoles.length; ++i) {\n                    h = newHoles[i];\n                    runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height] = h;\n                }\n                return this;\n            },\n\n            unFilter: function() {\n                delete runtime.filter;\n                this.refresh();\n                return this;\n            }\n        });\n        \n        container.attr('data-min-width', Math.floor($W.width() / 80) * 80);\n        // execute plugins;\n        for (var i in layoutManager.plugin) {\n            if (layoutManager.plugin.hasOwnProperty(i)) {\n                layoutManager.plugin[i].call(klass, setting, container);\n            }\n        }\n\n        // setup resize event;\n        $W.resize(function() {\n            if (runtime.running) return;\n            runtime.running = 1;\n            setTimeout(function() {\n                runtime.running = 0;\n                setting.onResize.call(klass, container);\n            }, 122);\n            container.attr('data-min-width', Math.floor($W.width() / 80) * 80);\n        });\n    };\n\n    /*\n    add default setting;\n    example:\n\n        freewall.addConfig({\n            offsetLeft: 0\n        });\n    */\n    freewall.addConfig = function(newConfig) {\n        // add default setting;\n        $.extend(layoutManager.defaultConfig, newConfig);    \n    };\n    \n\n    /*\n    support create new arrange algorithm;\n    example:\n\n        freewall.createEngine({\n            slice: function(items, setting) {\n                // slice engine;\n            }\n        });\n    */\n    freewall.createEngine = function(engineData) {\n        // create new engine;\n        $.extend(engine, engineData);\n    };\n    \n    /*\n    support create new plugin;\n    example:\n        \n        freewall.createPlugin({\n            centering: function(setting, container) {\n                console.log(this);\n                console.log(setting);\n            }\n        })l\n    */\n    freewall.createPlugin = function(pluginData) {\n        // register new plugin;\n        $.extend(layoutManager.plugin, pluginData);\n    };\n\n    /*\n    support access helper function;\n    example:\n\n        freewall.getMethod('setBlock')(block, setting);\n    */\n    freewall.getMethod = function(method) {\n        // get helper method;\n        return layoutManager[method];\n    };\n \n})(window.Zepto || window.jQuery);\n"],"sourceRoot":"assets/scripts/"}