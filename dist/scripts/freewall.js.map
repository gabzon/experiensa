{"version":3,"sources":["../bower_components/freewall/freewall.js"],"names":["$","Freewall","selector","setDraggable","item","cellH","runtime","gutterX","gutterY","cellW","$item","handle","find","attr","layoutManager","onStart","event","setting","animate","transition","setTransition","this","css","addClass","onBlockDrag","call","onDrag","tracker","position","top","Math","round","left","width","height","min","max","limitRow","limitCol","klass","setHoles","refresh","onBlockMove","onDrop","removeClass","zIndex","x","y","key","oldDropId","matrix","removeAttr","holes","data-width","data-height","data-position","onBlockDrop","container","MAX","Number","MAX_VALUE","totalGrid","extend","defaultConfig","arguments","blocks","events","cellS","filter","lastId","length","maxWoB","maxHoB","minWoB","minHoB","running","totalCol","totalRow","sortFunc","keepOrder","bodyStyle","document","body","style","webkitTransition","MozTransition","msTransition","OTransition","addCustomEvent","name","func","toLowerCase","eid","push","appendBlock","items","allBlock","appendTo","block","activeBlock","isFunction","sort","each","index","loadBlock","engine","setWallSize","showBlock","draggable","getAttribute","appendHoles","i","newHoles","concat","h","destroy","fillHoles","fireEvent","object","fitHeight","$W","fitZone","fitWidth","resetGrid","adjustUnit","data","fixPos","option","fixSize","prepend","params","oldArg","method","callee","apply","Array","prototype","slice","reset","sortBy","unFilter","floor","plugin","hasOwnProperty","resize","setTimeout","onResize","isNumeric","src","constructor","Function","window","$D","delay","cacheSize","rightToLeft","bottomToTop","onGapFound","onComplete","onBlockReady","onBlockFinish","onBlockActive","onBlockResize","active","parseInt","blockId","hasClass","id","data-delay","isNaN","makeRound","col","row","split","holeId","setBlock","realBlock","toFixed","action","start","self","trans","opacity","nestedGrid","clearTimeout","innerWall","nested","adjustBlock","isTouch","config","startX","startY","mouseDown","evt","stopPropagation","originalEvent","touches","changedTouches","button","which","ele","clientX","clientY","$E","bind","mouseUp","mouseMove","unbind","$H","posStyle","on","stop","getFreeArea","t","l","maxY","maxX","minX","minY","totalWidth","totalHeight","data-total-col","data-total-row","data-wall-width","ceil","data-wall-height","giot","fillMatrix","w","wall","bigLoop","freeArea","misBlock","lastBlock","smallLoop","b","s","shift","splice","lastX","lastY","addConfig","newConfig","createEngine","engineData","createPlugin","pluginData","getMethod","freewall","Zepto","jQuery"],"mappings":"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","file":"freewall.js","sourcesContent":["// created by Minh Nguyen;\n// version 1.0.6;\n\n(function($) {\n\n    // for zeptojs;\n    $.isNumeric == null && ($.isNumeric = function(src) {\n        return src != null && src.constructor === Number;\n    });\n\n    $.isFunction == null && ($.isFunction = function(src) {\n        return src != null && src instanceof Function;\n    });\n\n    var $W = $(window);\n    var $D = $(document);\n\n    var layoutManager = {\n        // default setting;\n        defaultConfig: {\n            animate: false,\n            cellW: 100, // function(container) {return 100;}\n            cellH: 100, // function(container) {return 100;}\n            delay: 0, // slowdown active block;\n            engine: 'giot', // 'giot' is a person name;\n            fixSize: null, // resize + adjust = fill gap;\n            //fixSize: 0, resize but keep ratio = no fill gap;\n            //fixSize: 1, no resize + no adjust = no fill gap;\n            gutterX: 15, // width spacing between blocks;\n            gutterY: 15, // height spacing between blocks;\n            keepOrder: false,\n            selector: '> div',\n            draggable: false,\n            cacheSize: true, // caches the original size of block;\n            rightToLeft: false,\n            bottomToTop: false,\n            onGapFound: function() {},\n            onComplete: function() {},\n            onResize: function() {},\n            onBlockDrag: function() {},\n            onBlockMove: function() {},\n            onBlockDrop: function() {},\n            onBlockReady: function() {},\n            onBlockFinish: function() {},\n            onBlockActive: function() {},\n            onBlockResize: function() {}\n        },\n        plugin: {},\n        totalGrid: 1,\n        transition: false,\n        loadBlock: function(item, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var block = null;\n            var $item = $(item);\n            var active = $item.data(\"active\");\n            var fixPos = $item.attr('data-position');\n            var fixSize = parseInt($item.attr('data-fixSize'));\n            var blockId = runtime.lastId++ + '-' + runtime.totalGrid;\n\n            //ignore dragging block;\n            if ($item.hasClass('fw-float')) return null;\n            $item.attr({id: blockId, 'data-delay': item.index});\n\n            //remove animation for speed render;\n            if (setting.animate && this.transition) {\n                this.setTransition(item, \"\");\n            }\n\n            isNaN(fixSize) && (fixSize = null);\n            (fixSize == null) && (fixSize = setting.fixSize);\n            var makeRound = (!fixSize) ? \"round\" : \"ceil\";\n            // store original size;\n\n            $item.attr('data-height') == null && $item.attr('data-height', $item.height());\n            $item.attr('data-width') == null && $item.attr('data-width', $item.width());\n            var height = 1 * $item.attr('data-height');\n            var width = 1 * $item.attr('data-width');\n\n            if (!setting.cacheSize) {\n                item.style.width = \"\";\n                width = $item.width();\n\n                item.style.height = \"\";\n                height = $item.height();\n            }\n\n            var col = !width ? 0 : Math[makeRound]((width + gutterX) / cellW);\n            var row = !height ? 0 : Math[makeRound]((height + gutterY) / cellH);\n\n            // estimate size;\n            if (!fixSize && setting.cellH == 'auto') {\n                $item.width(cellW * col - gutterX);\n                item.style.height = \"\";\n                height = $item.height();\n                row = !height ? 0 : Math.round((height + gutterY) / cellH);\n            }\n\n            if (!fixSize && setting.cellW == 'auto') {\n                $item.height(cellH * row - gutterY);\n                item.style.width = \"\";\n                width = $item.width();\n                col = !width ? 0 : Math.round((width + gutterX) / cellW);\n            }\n\n            // for none resize block;\n            if ((fixSize != null) && (col > runtime.limitCol || row > runtime.limitRow)) {\n                block = null;\n            } else {\n                // get smallest width and smallest height of block;\n                // using for image runtime;\n                row && row < runtime.minHoB && (runtime.minHoB = row);\n                col && col < runtime.minWoB && (runtime.minWoB = col);\n\n                // get biggest width and biggest height of block;\n                row > runtime.maxHoB && (runtime.maxHoB = row);\n                col > runtime.maxWoB && (runtime.maxWoB = col);\n\n                width == 0 && (col = 0);\n                height == 0 && (row = 0);\n\n                block = {\n                    resize: false,\n                    id: blockId,\n                    width: col,\n                    height: row,\n                    fixSize: fixSize\n                };\n\n                // for fix position;\n                if (fixPos) {\n                    fixPos = fixPos.split(\"-\");\n                    block.y = 1 * fixPos[0];\n                    block.x = 1 * fixPos[1];\n                    block.width = fixSize != null ? col : Math.min(col, runtime.limitCol - block.x);\n                    block.height = fixSize != null ? row : Math.min(row, runtime.limitRow - block.y);\n                    var holeId = block.y + \"-\" + block.x + \"-\" + block.width + \"-\" + block.height;\n                    if (active) {\n                        runtime.holes[holeId] = {\n                            id: block.id,\n                            top: block.y,\n                            left: block.x,\n                            width: block.width,\n                            height: block.height\n                        };\n                        this.setBlock(block, setting);\n                    } else {\n                        delete runtime.holes[holeId];\n                    }\n\n                }\n            }\n\n            // for css animation;\n            if ($item.attr(\"data-state\") == null) {\n                $item.attr(\"data-state\", \"init\");\n            } else {\n                $item.attr(\"data-state\", \"move\");\n            }\n\n            setting.onBlockReady.call(item, block, setting);\n\n            return (fixPos && active) ? null : block;\n        },\n        setBlock: function(block, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var height = block.height;\n            var width = block.width;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var x = block.x;\n            var y = block.y;\n\n            if (setting.rightToLeft) {\n                x = runtime.limitCol - x - width;\n            }\n            if (setting.bottomToTop) {\n                y = runtime.limitRow - y - height;\n            }\n\n            var realBlock = {\n                fixSize: block.fixSize,\n                resize: block.resize,\n                top: y * cellH,\n                left: x  * cellW,\n                width: cellW * width - gutterX,\n                height: cellH * height - gutterY\n            };\n\n            realBlock.top = 1 * realBlock.top.toFixed(2);\n            realBlock.left = 1 * realBlock.left.toFixed(2);\n            realBlock.width = 1 * realBlock.width.toFixed(2);\n            realBlock.height = 1 * realBlock.height.toFixed(2);\n\n            //runtime.length += 1;\n            block.id && (runtime.blocks[block.id] = realBlock);\n\n            // for append feature;\n            return realBlock;\n        },\n        showBlock: function(item, setting) {\n            var runtime = setting.runtime;\n            var method = setting.animate && !this.transition ? 'animate' : 'css';\n            var block = runtime.blocks[item.id];\n            var $item = $(item);\n            var self = this;\n            var start = $item.attr(\"data-state\") != \"move\";\n            var trans = start ? \"width 0.5s, height 0.5s\" : \"top 0.5s, left 0.5s, width 0.5s, height 0.5s, opacity 0.5s\";\n\n            item.delay && clearTimeout(item.delay);\n            //ignore dragging block;\n            if ($item.hasClass('fw-float')) return;\n\n            // kill the old transition;\n            self.setTransition(item, \"\");\n            item.style.position = \"absolute\";\n            setting.onBlockActive.call(item, block, setting);\n\n            function action() {\n                // start to arrange;\n                start && $item.attr(\"data-state\", \"start\");\n                // add animation by using css3 transition;\n                if (setting.animate && self.transition) {\n                    self.setTransition(item, trans);\n                }\n\n                // for hidden block;\n                if (!block) {\n                    //var position = $item.position(); <= make speed so slow;\n                    var height = parseInt(item.style.height) || 0;\n                    var width = parseInt(item.style.width) || 0;\n                    var left = parseInt(item.style.left) || 0;\n                    var top = parseInt(item.style.top) || 0;\n                    $item[method]({\n                        left: left + width / 2,\n                        top: top + height / 2,\n                        width: 0,\n                        height: 0,\n                        opacity: 0\n                    });\n                } else {\n                    if (block.fixSize) {\n                        block.height = 1 * $item.attr(\"data-height\");\n                        block.width = 1 * $item.attr(\"data-width\");\n                    }\n\n                    $item[\"css\"]({\n                        opacity: 1,\n                        width: block.width,\n                        height: block.height\n                    });\n\n                    // for animating by javascript;\n                    $item[method]({\n                        top: block.top,\n                        left: block.left\n                    });\n\n                    if ($item.attr('data-nested') != null) {\n                        self.nestedGrid(item, setting);\n                    }\n                }\n\n                runtime.length -= 1;\n\n                setting.onBlockFinish.call(item, block, setting);\n\n                runtime.length == 0 && setting.onComplete.call(item, block, setting);\n            }\n\n            block && block.resize && setting.onBlockResize.call(item, block, setting);\n\n            setting.delay > 0 ? (item.delay = setTimeout(action, setting.delay * $item.attr(\"data-delay\"))) : action();\n        },\n        nestedGrid: function(item, setting) {\n            var innerWall, $item = $(item), runtime = setting.runtime;\n            var gutterX = $item.attr(\"data-gutterX\") || setting.gutterX;\n            var gutterY = $item.attr(\"data-gutterY\") || setting.gutterY;\n            var method = $item.attr(\"data-method\") || \"fitZone\";\n            var nested = $item.attr('data-nested') || \"> div\";\n            var cellH = $item.attr(\"data-cellH\") || setting.cellH;\n            var cellW = $item.attr(\"data-cellW\") || setting.cellW;\n            var block = runtime.blocks[item.id];\n\n            if (block) {\n                innerWall = new Freewall($item);\n                innerWall.reset({\n                    cellH: cellH,\n                    cellW: cellW,\n                    gutterX: 1 * gutterX,\n                    gutterY: 1 * gutterY,\n                    selector: nested,\n                    cacheSize: false\n                });\n\n                switch (method) {\n                    case \"fitHeight\":\n                        innerWall[method](block.height);\n                        break;\n                    case \"fitWidth\":\n                        innerWall[method](block.width);\n                        break;\n                    case \"fitZone\":\n                        innerWall[method](block.width, block.height);\n                        break;\n                }\n            }\n        },\n        adjustBlock: function(block, setting) {\n            var runtime = setting.runtime;\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var $item = $(\"#\" + block.id);\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n\n            if (setting.cellH == 'auto') {\n                $item.width(block.width * cellW - gutterX);\n                $item[0].style.height = \"\";\n                block.height = Math.round(($item.height() + gutterY) / cellH);\n            }\n        },\n        adjustUnit: function(width, height, setting) {\n            var gutterX = setting.gutterX;\n            var gutterY = setting.gutterY;\n            var runtime = setting.runtime;\n            var cellW = setting.cellW;\n            var cellH = setting.cellH;\n\n            $.isFunction(cellW) && (cellW = cellW(width));\n            cellW = 1 * cellW;\n            !$.isNumeric(cellW) && (cellW = 1);\n\n            $.isFunction(cellH) && (cellH = cellH(height));\n            cellH = 1 * cellH;\n            !$.isNumeric(cellH) && (cellH = 1);\n\n            if ($.isNumeric(width)) {\n                // adjust cell width via container;\n                cellW < 1 && (cellW = cellW * width);\n\n                // estimate total columns;\n                var limitCol = Math.max(1, Math.floor(width / cellW));\n\n                // adjust unit size for fit width;\n                if (!$.isNumeric(gutterX)) {\n                    gutterX = (width - limitCol * cellW) / Math.max(1, (limitCol - 1));\n                    gutterX = Math.max(0, gutterX);\n                }\n\n                limitCol = Math.floor((width + gutterX) / cellW);\n                runtime.cellW = (width + gutterX) / Math.max(limitCol, 1);\n                runtime.cellS = runtime.cellW / cellW;\n                runtime.gutterX = gutterX;\n                runtime.limitCol = limitCol;\n            }\n\n            if ($.isNumeric(height)) {\n                // adjust cell height via container;\n                cellH < 1 && (cellH = cellH * height);\n\n                // estimate total rows;\n                var limitRow = Math.max(1, Math.floor(height / cellH));\n\n                // adjust size unit for fit height;\n                if (!$.isNumeric(gutterY)) {\n                    gutterY = (height - limitRow * cellH) / Math.max(1, (limitRow - 1));\n                    gutterY = Math.max(0, gutterY);\n                }\n\n                limitRow = Math.floor((height + gutterY) / cellH);\n                runtime.cellH = (height + gutterY) / Math.max(limitRow, 1);\n                runtime.cellS = runtime.cellH / cellH;\n                runtime.gutterY = gutterY;\n                runtime.limitRow = limitRow;\n            }\n\n            if (!$.isNumeric(width)) {\n                // adjust cell width via cell height;\n                cellW < 1 && (cellW = runtime.cellH);\n                runtime.cellW = cellW != 1 ? cellW * runtime.cellS : 1;\n                runtime.gutterX = gutterX;\n                runtime.limitCol = 666666;\n            }\n\n            if (!$.isNumeric(height)) {\n                // adjust cell height via cell width;\n                cellH < 1 && (cellH = runtime.cellW);\n                runtime.cellH = cellH != 1 ? cellH * runtime.cellS : 1;\n                runtime.gutterY = gutterY;\n                runtime.limitRow = 666666;\n            }\n\n            runtime.keepOrder = setting.keepOrder;\n        },\n        resetGrid: function(runtime) {\n            runtime.blocks = {};\n            runtime.length = 0;\n            runtime.cellH = 0;\n            runtime.cellW = 0;\n            runtime.lastId = 1;\n            runtime.matrix = {};\n            runtime.totalCol = 0;\n            runtime.totalRow = 0;\n        },\n        setDraggable: function(item, option) {\n            var isTouch = false;\n            var config = {\n                startX: 0, //start clientX;\n                startY: 0,\n                top: 0,\n                left: 0,\n                handle: null,\n                onDrop: function() {},\n                onDrag: function() {},\n                onStart: function() {}\n            };\n\n            $(item).each(function() {\n                var setting = $.extend({}, config, option);\n                var handle = setting.handle || this;\n                var ele = this;\n                var $E = $(ele);\n                var $H = $(handle);\n\n                var posStyle = $E.css(\"position\");\n                posStyle != \"absolute\" && $E.css(\"position\", \"relative\");\n\n\n                function mouseDown(evt) {\n                    evt.stopPropagation();\n                    evt = evt.originalEvent;\n\n                    if (evt.touches) {\n                        isTouch = true;\n                        evt = evt.changedTouches[0];\n                    }\n\n                    if (evt.button != 2 && evt.which != 3) {\n                        setting.onStart.call(ele, evt);\n\n                        setting.startX = evt.clientX;\n                        setting.startY = evt.clientY;\n                        setting.top = parseInt($E.css(\"top\")) || 0;\n                        setting.left = parseInt($E.css(\"left\")) || 0;\n\n                        $D.bind(\"mouseup touchend\", mouseUp);\n                        $D.bind(\"mousemove touchmove\", mouseMove);\n                    }\n\n                    return false;\n                };\n\n\n                function mouseMove(evt) {\n                    evt = evt.originalEvent;\n                    isTouch && (evt = evt.changedTouches[0]);\n\n                    $E.css({\n                        top: setting.top - (setting.startY - evt.clientY),\n                        left: setting.left - (setting.startX - evt.clientX)\n                    });\n\n                    setting.onDrag.call(ele, evt);\n                };\n\n                function mouseUp(evt) {\n                    evt = evt.originalEvent;\n                    isTouch && (evt = evt.changedTouches[0]);\n\n                    setting.onDrop.call(ele, evt);\n\n                    $D.unbind(\"mouseup touchend\", mouseUp);\n                    $D.unbind(\"mousemove touchmove\", mouseMove);\n                };\n\n                // ignore drag drop on text field;\n                $E.find(\"iframe, form, input, textarea, .ignore-drag\")\n                .each(function() {\n                    $(this).on(\"touchstart mousedown\", function(evt) {\n                        evt.stopPropagation();\n                    });\n                });\n\n                $D.unbind(\"mouseup touchend\", mouseUp);\n                $D.unbind(\"mousemove touchmove\", mouseMove);\n                $H.unbind(\"mousedown touchstart\").bind(\"mousedown touchstart\", mouseDown);\n\n            });\n        },\n        setTransition: function(item, trans) {\n            var style = item.style;\n            var $item = $(item);\n\n            // remove animation;\n            if (!this.transition && $item.stop) {\n                $item.stop();\n            } else if (style.webkitTransition != null) {\n                style.webkitTransition = trans;\n            } else if (style.MozTransition != null) {\n                style.MozTransition = trans;\n            } else if (style.msTransition != null) {\n                style.msTransition = trans;\n            } else if (style.OTransition != null) {\n                style.OTransition = trans;\n            } else {\n                style.transition = trans;\n            }\n        },\n        getFreeArea: function(t, l, runtime) {\n            var maxY = Math.min(t + runtime.maxHoB, runtime.limitRow);\n            var maxX = Math.min(l + runtime.maxWoB, runtime.limitCol);\n            var minX = maxX;\n            var minY = maxY;\n            var matrix = runtime.matrix;\n\n            // find limit zone by horizon;\n            for (var y = t; y < minY; ++y) {\n                for (var x = l; x < maxX; ++x) {\n                    if (matrix[y + '-' + x]) {\n                        (l < x && x < minX) && (minX = x);\n                    }\n                }\n            }\n\n            // find limit zone by vertical;\n            for (var y = t; y < maxY; ++y) {\n                for (var x = l; x < minX; ++x) {\n                    if (matrix[y + '-' + x]) {\n                        (t < y && y < minY) && (minY = y);\n                    }\n                }\n            }\n\n            return {\n                top: t,\n                left: l,\n                width: minX - l,\n                height: minY - t\n            };\n\n        },\n        setWallSize: function(runtime, container) {\n            var totalRow = runtime.totalRow;\n            var totalCol = runtime.totalCol;\n            var gutterY = runtime.gutterY;\n            var gutterX = runtime.gutterX;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var totalWidth = Math.max(0, cellW * totalCol - gutterX);\n            var totalHeight = Math.max(0, cellH * totalRow - gutterY);\n\n            container.attr({\n                'data-total-col': totalCol,\n                'data-total-row': totalRow,\n                'data-wall-width': Math.ceil(totalWidth),\n                'data-wall-height': Math.ceil(totalHeight)\n            });\n\n            if (runtime.limitCol < runtime.limitRow) {\n                // do not set height with nesting grid;\n                !container.attr(\"data-height\") && container.height(Math.ceil(totalHeight));\n            }\n        }\n    };\n\n\n\n    var engine = {\n        // Giot just a person name;\n        giot: function(items, setting) {\n            var runtime = setting.runtime,\n                row = runtime.limitRow,\n                col = runtime.limitCol,\n                x = 0,\n                y = 0,\n                maxX = runtime.totalCol,\n                maxY = runtime.totalRow,\n                wall = {},\n                holes = runtime.holes,\n                block = null,\n                matrix = runtime.matrix,\n                bigLoop = Math.max(col, row),\n                freeArea = null,\n                misBlock = null,\n                fitWidth = col < row ? 1 : 0,\n                lastBlock = null,\n                smallLoop = Math.min(col, row);\n\n            // fill area with top, left, width, height;\n            function fillMatrix(id, t, l, w, h) {\n                for (var y = t; y < t + h;) {\n                    for (var x = l; x < l + w;) {\n                        matrix[y + '-' + x] = id;\n                        ++x > maxX && (maxX = x);\n                    }\n                    ++y > maxY && (maxY = y);\n                }\n            }\n\n            // set holes on the wall;\n            for (var i in holes) {\n                if (holes.hasOwnProperty(i)) {\n                    fillMatrix(holes[i][\"id\"] || true, holes[i]['top'], holes[i]['left'], holes[i]['width'], holes[i]['height']);\n                }\n            }\n\n\n            for (var b = 0; b < bigLoop; ++b) {\n                if (!items.length) break;\n                fitWidth ? (y = b) : (x = b);\n                lastBlock = null;\n\n                for (var s = 0; s < smallLoop; ++s) {\n                    if (!items.length) break;\n                    block = null;\n                    fitWidth ? (x = s) : (y = s);\n                    if (runtime.matrix[y + '-' + x]) continue;\n                    freeArea = layoutManager.getFreeArea(y, x, runtime);\n\n                    // trying resize last block to fit free area;\n                    if (setting.fixSize == null) {\n                        // resize near block to fill gap;\n                        if (lastBlock && !fitWidth && runtime.minHoB > freeArea.height) {\n                            lastBlock.height += freeArea.height;\n                            lastBlock.resize = true;\n                            fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                            layoutManager.setBlock(lastBlock, setting);\n                            continue;\n                        } else if (lastBlock && fitWidth && runtime.minWoB > freeArea.width) {\n                            lastBlock.width += freeArea.width;\n                            lastBlock.resize = true;\n                            fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                            layoutManager.setBlock(lastBlock, setting);\n                            continue;\n                        }\n                    }\n\n                    // get the next block to keep order;\n                    if (runtime.keepOrder) {\n                        block = items.shift();\n                        block.resize = true;\n                    } else {\n                        // find a suitable block to fit gap;\n                        for (var i = 0; i < items.length; ++i) {\n                            if (items[i].height > freeArea.height) continue;\n                            if (items[i].width > freeArea.width) continue;\n                            block = items.splice(i, 1)[0];\n                            break;\n                        }\n\n                        // trying resize the other block to fit gap;\n                        if (block == null && setting.fixSize == null) {\n                            // get other block fill to gap;\n                            for (var i = 0; i < items.length; ++i) {\n                                if (items[i]['fixSize'] != null) continue;\n                                block = items.splice(i, 1)[0];\n                                block.resize = true;\n                                break;\n                            }\n\n                        }\n                    }\n\n\n                    if (block != null) {\n                        // resize block with free area;\n                        if (block.resize) {\n                            if (fitWidth) {\n                                block.width = freeArea.width;\n                                if (setting.cellH == 'auto') {\n                                    layoutManager.adjustBlock(block, setting);\n                                }\n                                // for fitZone;\n                                block.height = Math.min(block.height, freeArea.height);\n                            } else {\n                                block.height = freeArea.height;\n                                // for fitZone;\n                                block.width = Math.min(block.width, freeArea.width);\n                            }\n                        }\n\n                        wall[block.id] = {\n                            id: block.id,\n                            x: x,\n                            y: y,\n                            width: block.width,\n                            height: block.height,\n                            resize: block.resize,\n                            fixSize: block.fixSize\n                        };\n\n                        // keep success block for next round;\n                        lastBlock = wall[block.id];\n\n                        fillMatrix(lastBlock.id, lastBlock.y, lastBlock.x, lastBlock.width, lastBlock.height);\n                        layoutManager.setBlock(lastBlock, setting);\n                    } else {\n                        // get expect area;\n                        var misBlock = {\n                            x: x,\n                            y: y,\n                            fixSize: 0\n                        };\n                        if (fitWidth) {\n                            misBlock.width = freeArea.width;\n                            misBlock.height = 0;\n                            var lastX = x - 1;\n                            var lastY = y;\n\n                            while (matrix[lastY + '-' + lastX]) {\n                                matrix[lastY + '-' + x] = true;\n                                misBlock.height += 1;\n                                lastY += 1;\n                            }\n                        } else {\n                            misBlock.height = freeArea.height;\n                            misBlock.width = 0;\n                            var lastY = y - 1;\n                            var lastX = x;\n\n                            while (matrix[lastY + '-' + lastX]) {\n                                matrix[y + '-' + lastX] = true;\n                                misBlock.width += 1;\n                                lastX += 1;\n                            }\n                        }\n                        setting.onGapFound(layoutManager.setBlock(misBlock, setting), setting);\n                    }\n                }\n\n            }\n\n            runtime.matrix = matrix;\n            runtime.totalRow = maxY;\n            runtime.totalCol = maxX;\n        }\n    };\n\n\n\n    function Freewall(selector) {\n\n        var container = $(selector);\n        if (container.css('position') == 'static') {\n            container.css('position', 'relative');\n        }\n        var MAX = Number.MAX_VALUE;\n        var klass = this;\n        // increase the instance index;\n        layoutManager.totalGrid += 1;\n\n        var setting = $.extend({}, layoutManager.defaultConfig);\n        var runtime = {\n            arguments: null,\n            blocks: {}, // store all items;\n            events: {}, // store custome events;\n            matrix: {},\n            holes: {}, // forbidden zone;\n\n            cellW: 0,\n            cellH: 0, // unit adjust;\n            cellS: 1, // unit scale;\n\n            filter: '', // filter selector;\n            lastId: 0,\n            length: 0,\n\n            maxWoB: 0, // max width of block;\n            maxHoB: 0,\n            minWoB: MAX,\n            minHoB: MAX, // min height of block;\n\n            running: 0, // flag to check layout arranging;\n\n            gutterX: 15,\n            gutterY: 15,\n\n            totalCol: 0,\n            totalRow: 0,\n\n            limitCol: 666666, // maximum column;\n            limitRow: 666666,\n\n            sortFunc: null,\n            keepOrder: false\n        };\n        setting.runtime = runtime;\n        runtime.totalGrid = layoutManager.totalGrid;\n\n        // check browser support transition;\n        var bodyStyle = document.body.style;\n        if (!layoutManager.transition) {\n            (bodyStyle.webkitTransition != null ||\n            bodyStyle.MozTransition != null ||\n            bodyStyle.msTransition != null ||\n            bodyStyle.OTransition != null ||\n            bodyStyle.transition != null) &&\n            (layoutManager.transition = true);\n        }\n\n\n        function setDraggable(item) {\n\n            var gutterX = runtime.gutterX;\n            var gutterY = runtime.gutterY;\n            var cellH = runtime.cellH;\n            var cellW = runtime.cellW;\n            var $item = $(item);\n            var handle = $item.find($item.attr(\"data-handle\"));\n            layoutManager.setDraggable(item, {\n                handle: handle[0],\n                onStart: function(event) {\n                    if (setting.animate && layoutManager.transition) {\n                        layoutManager.setTransition(this, \"\");\n                    }\n                    $item.css('z-index', 9999).addClass('fw-float');\n\n                    setting.onBlockDrag.call(item, event);\n                },\n                onDrag: function(event, tracker) {\n                    var position = $item.position();\n                    var top = Math.round(position.top / cellH);\n                    var left = Math.round(position.left / cellW);\n                    var width = Math.round($item.width() / cellW);\n                    var height = Math.round($item.height() / cellH);\n                    top = Math.min(Math.max(0, top), runtime.limitRow - height);\n                    left = Math.min(Math.max(0, left), runtime.limitCol - width);\n                    klass.setHoles({top: top, left: left, width: width, height: height});\n                    klass.refresh();\n\n                    setting.onBlockMove.call(item, event);\n                },\n                onDrop: function(event) {\n                    var position = $item.position();\n                    var top = Math.round(position.top / cellH);\n                    var left = Math.round(position.left / cellW);\n                    var width = Math.round($item.width() / cellW);\n                    var height = Math.round($item.height() / cellH);\n                    top = Math.min(Math.max(0, top), runtime.limitRow - height);\n                    left = Math.min(Math.max(0, left), runtime.limitCol - width);\n\n                    $item.removeClass('fw-float');\n                    $item.css({\n                        zIndex: \"auto\",\n                        top: top * cellH,\n                        left: left * cellW\n                    });\n\n                    //check old drag element;\n                    var x, y, key, oldDropId;\n                    for (y = 0; y < height; ++y) {\n                        for (x = 0; x < width; ++x) {\n                            key = (y + top) + \"-\" + (x + left);\n                            oldDropId = runtime.matrix[key];\n                            if (oldDropId && oldDropId != true) {\n                                $(\"#\" + oldDropId).removeAttr(\"data-position\");\n                            }\n                        }\n                    }\n\n                    runtime.holes = {};\n\n                    $item.attr({\n                        \"data-width\": $item.width(),\n                        \"data-height\": $item.height(),\n                        \"data-position\": top + \"-\" + left\n                    });\n\n                    klass.refresh();\n\n                    setting.onBlockDrop.call(item, event);\n                }\n            });\n        }\n\n\n        $.extend(klass, {\n\n            addCustomEvent: function(name, func) {\n                var events = runtime.events;\n                name = name.toLowerCase();\n                !events[name] && (events[name] = []);\n                func.eid = events[name].length;\n                events[name].push(func);\n                return this;\n            },\n\n            appendBlock: function(items) {\n                var allBlock = $(items).appendTo(container);\n                var block = null;\n                var activeBlock = [];\n\n                if (runtime.arguments) {\n\n                    if ($.isFunction(runtime.sortFunc)) {\n                        allBlock.sort(runtime.sortFunc);\n                    }\n\n                    allBlock.each(function(index, item) {\n                        item.index = ++index;\n                        block = layoutManager.loadBlock(item, setting);\n                        block && activeBlock.push(block);\n                    });\n\n                    engine[setting.engine](activeBlock, setting);\n\n                    layoutManager.setWallSize(runtime, container);\n\n                    runtime.length = allBlock.length;\n\n                    allBlock.each(function(index, item) {\n                        layoutManager.showBlock(item, setting);\n                        if (setting.draggable || item.getAttribute('data-draggable')) {\n                            setDraggable(item);\n                        }\n                    });\n                }\n            },\n            /*\n            add one or more blank area (hole) on layout;\n            example:\n\n                wall.appendHoles({\n                    top: 10,\n                    left: 36,\n                    width: 2,\n                    height: 6\n                });\n\n                wall.appendHoles([\n                    {\n                        top: 16,\n                        left: 16,\n                        width: 8,\n                        height: 2\n                    },\n                    {\n                        top: 10,\n                        left: 36,\n                        width: 2,\n                        height: 6\n                    }\n                ]);\n\n            */\n            appendHoles: function(holes) {\n                var newHoles = [].concat(holes), h = {}, i;\n                for (i = 0; i < newHoles.length; ++i) {\n                    h = newHoles[i];\n                    runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height] = h;\n                }\n                return this;\n            },\n\n            container: container,\n\n            destroy: function() {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                allBlock.each(function(index, item) {\n                    $item = $(item);\n                    var width = 1 * $item.attr('data-width') || \"\";\n                    var height = 1 * $item.attr('data-height') || \"\";\n                    $item.width(width).height(height).css({\n                        position: 'static'\n                    });\n                });\n            },\n\n            fillHoles: function(holes) {\n                if (arguments.length == 0) {\n                    runtime.holes = {};\n                } else {\n                    var newHoles = [].concat(holes), h = {}, i;\n                    for (i = 0; i < newHoles.length; ++i) {\n                        h = newHoles[i];\n                        delete runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height];\n                    }\n                }\n                return this;\n            },\n\n            filter: function(filter) {\n                runtime.filter = filter;\n                if (runtime.arguments) {\n                    this.refresh();\n                }\n                return this;\n            },\n\n            fireEvent: function(name, object, setting) {\n                var events = runtime.events;\n                name = name.toLowerCase();\n                if (events[name] && events[name].length) {\n                    for (var i = 0; i < events[name].length; ++i) {\n                        events[name][i].call(this, object, setting);\n                    }\n                }\n                return this;\n            },\n\n            fitHeight: function(height) {\n\n                var height = height ? height : container.height() || $W.height();\n\n                this.fitZone('auto', height);\n\n                runtime.arguments = arguments;\n            },\n\n            fitWidth: function(width) {\n\n                var width = width ? width : container.width() || $W.width();\n\n                this.fitZone(width, 'auto');\n\n                runtime.arguments = arguments;\n            },\n\n            fitZone: function(width, height) {\n                var allBlock = container.find(setting.selector).removeAttr('id'),\n                    block = null,\n                    activeBlock = [];\n\n                height = height ? height : container.height() || $W.height();\n                width = width ? width : container.width() || $W.width();\n\n                runtime.arguments = arguments;\n\n                layoutManager.resetGrid(runtime);\n\n                layoutManager.adjustUnit(width, height, setting);\n\n                if (runtime.filter) {\n                    allBlock.data('active', 0);\n                    allBlock.filter(runtime.filter).data('active', 1);\n                } else {\n                    allBlock.data('active', 1);\n                }\n\n                if ($.isFunction(runtime.sortFunc)) {\n                    allBlock.sort(runtime.sortFunc);\n                }\n\n                allBlock.each(function(index, item) {\n                    var $item = $(item);\n                    item.index = ++index;\n                    block = layoutManager.loadBlock(item, setting);\n                    block && $item.data(\"active\") && activeBlock.push(block);\n                });\n\n                klass.fireEvent('onGridReady', container, setting);\n\n                engine[setting.engine](activeBlock, setting);\n\n                layoutManager.setWallSize(runtime, container);\n\n                klass.fireEvent('onGridArrange', container, setting);\n\n                runtime.length = allBlock.length;\n\n                allBlock.each(function(index, item) {\n                    layoutManager.showBlock(item, setting);\n                    if (setting.draggable || item.getAttribute('data-draggable')) {\n                        setDraggable(item);\n                    }\n                });\n            },\n\n            /*\n            set block with special position, the top and left are multiple of unit width/height;\n            example:\n\n                wall.fixPos({\n                    top: 0,\n                    left: 0,\n                    block: $('.free')\n                });\n            */\n            fixPos: function(option) {\n                $(option.block).attr({'data-position': option.top + \"-\" + option.left});\n                return this;\n            },\n\n            /*\n            set block with special size, the width and height are multiple of unit width/height;\n            example:\n\n                wall.fixSize({\n                    height: 5,\n                    width: 2,\n                    block: $('.free')\n                });\n            */\n            fixSize: function(option) {\n                option.height != null && $(option.block).attr({'data-height': option.height});\n                option.width != null && $(option.block).attr({'data-width': option.width});\n                return this;\n            },\n\n            prepend: function(items) {\n                container.prepend(items);\n                if (runtime.arguments) {\n                    this.refresh();\n                }\n                return this;\n            },\n\n            refresh: function() {\n                var params = arguments.length ? arguments : runtime.arguments;\n                var oldArg = runtime.arguments;\n                var method = oldArg ? oldArg.callee : this.fitWidth;\n                method.apply(this, Array.prototype.slice.call(params, 0));\n                return this;\n            },\n\n            /*\n            custom layout setting;\n            example:\n\n                wall.reset({\n                    selector: '.brick',\n                    animate: true,\n                    cellW: 160,\n                    cellH: 160,\n                    delay: 50,\n                    onResize: function() {\n                        wall.fitWidth();\n                    }\n                });\n            */\n            reset: function(option) {\n                $.extend(setting, option);\n                return this;\n            },\n\n            /*\n            create one or more blank area (hole) on layout;\n            example:\n\n                wall.setHoles({\n                    top: 2,\n                    left: 2,\n                    width: 2,\n                    height: 2\n                });\n            */\n\n            setHoles: function(holes) {\n                var newHoles = [].concat(holes), h = {}, i;\n                runtime.holes = {};\n                for (i = 0; i < newHoles.length; ++i) {\n                    h = newHoles[i];\n                    runtime.holes[h.top + \"-\" + h.left + \"-\" + h.width + \"-\" + h.height] = h;\n                }\n                return this;\n            },\n            /*\n            sort items by using array sort function;\n            example:\n\n                wall.sortBy(function(itemA, itemB) {\n                    return $(itemA).width() - $(itemB).width();\n                });\n            */\n            sortBy: function(func) {\n                runtime.sortFunc = func;\n                if (runtime.arguments) {\n                    this.refresh();\n                }\n                return this;\n            },\n\n            unFilter: function() {\n                delete runtime.filter;\n                this.refresh();\n                return this;\n            }\n        });\n\n        container.attr('data-min-width', Math.floor($W.width() / 80) * 80);\n        // execute plugins;\n        for (var i in layoutManager.plugin) {\n            if (layoutManager.plugin.hasOwnProperty(i)) {\n                layoutManager.plugin[i].call(klass, setting, container);\n            }\n        }\n\n        // setup resize event;\n        $W.resize(function() {\n            if (runtime.running) return;\n            runtime.running = 1;\n            setTimeout(function() {\n                runtime.running = 0;\n                setting.onResize.call(klass, container);\n            }, 122);\n            container.attr('data-min-width', Math.floor($W.width() / 80) * 80);\n        });\n    };\n\n    /*\n    add default setting;\n    example:\n\n        Freewall.addConfig({\n            offsetLeft: 0\n        });\n    */\n    Freewall.addConfig = function(newConfig) {\n        // add default setting;\n        $.extend(layoutManager.defaultConfig, newConfig);\n    };\n\n\n    /*\n    support create new arrange algorithm;\n    example:\n\n        Freewall.createEngine({\n            slice: function(items, setting) {\n                // slice engine;\n            }\n        });\n    */\n    Freewall.createEngine = function(engineData) {\n        // create new engine;\n        $.extend(engine, engineData);\n    };\n\n    /*\n    support create new plugin;\n    example:\n\n        Freewall.createPlugin({\n            centering: function(setting, container) {\n                console.log(this);\n                console.log(setting);\n            }\n        })l\n    */\n    Freewall.createPlugin = function(pluginData) {\n        // register new plugin;\n        $.extend(layoutManager.plugin, pluginData);\n    };\n\n    /*\n    support access helper function;\n    example:\n\n        Freewall.getMethod('setBlock')(block, setting);\n    */\n    Freewall.getMethod = function(method) {\n        // get helper method;\n        return layoutManager[method];\n    };\n\n    window.Freewall = window.freewall = Freewall;\n\n})(window.Zepto || window.jQuery);\n"],"sourceRoot":"assets/scripts/"}